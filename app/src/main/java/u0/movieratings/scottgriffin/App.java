/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package u0.movieratings.scottgriffin;
import java.io.IOException;
import java.util.*;


public class App {
    public static void main(String[] args) throws IOException {
        RatingReader ratingReader = new RatingReader("movie-ratings.csv");

        List<Rating> list = ratingReader.getAllRatings();

        //   M O V I E   A V E R A G E   R A T I N G   C A L L S   (phase 5)
        Map<String, Double> movieAvgRatingMap = averageRating(list);
        printMovieAvgRatingMap(movieAvgRatingMap);

        //   H I G H E S T   R A T E R   C A L L S   (phase 6) 
        Map<String, List<Rating>> highestRaterMap = highestRater(list);
        printHighestRaterMap(highestRaterMap);

        //   H I G H E S T   A N D   L O W E S T   1 0   R A T E R   C A L L S   (phase 7 + challenge 1)
        Map<String, Double> raterAverageMap = raterAverage(list);
        List<Double> averagesList = addAveragesToList(raterAverageMap);  
        printHighestRaters(averagesList, raterAverageMap);    
        printLowestRaters(averagesList, raterAverageMap);

    }  //  - - - -  E N D   O F   M A I N  - - - -   



    
    //  A V E R A G E   R A T I N G
    public static Map<String, Double> averageRating(List<Rating> list){
        Map<String, List<Integer>> allRatingsMap = new HashMap<String, List<Integer>>();
        Map<String, Double> movieAvgRatingMap = new HashMap<>();

        //Populate allRatingsMap with list
        for (Rating r :list){
            String movieName = r.getMovieName();
            if (!allRatingsMap.containsKey(movieName)) {
                allRatingsMap.put(movieName, new ArrayList<Integer>());
            }
            allRatingsMap.get(movieName).add(r.getMovieRating());
        }

        //Calculate Averages and populate movieAverageMap
        for(String title : allRatingsMap.keySet()){
            int numOfRatings = allRatingsMap.get(title).size();
            Double totalRating = 0.0;
            for (int i : allRatingsMap.get(title)){
                totalRating += i;
            }
            double avgRating = totalRating / numOfRatings;
            movieAvgRatingMap.put(title, avgRating);
        }

        return movieAvgRatingMap;
    }

    //   P R I N T   M O V I E   A V E R A G E   M A P 
    public static void printMovieAvgRatingMap(Map<String, Double> movieAvgRatingMap){
        System.out.println("");
        System.out.println(" - - - - -   M O V I E   A V E R A G E   R A T I N G   - - - - - ");
        System.out.println("");

        for(String movieName : movieAvgRatingMap.keySet()){
            System.out.println("Movie Name     : " + movieName);
            System.out.println("Average Rating : " + movieAvgRatingMap.get(movieName));
            System.out.println(""); 
        }


               
        
    }
    
    //  H I G H E S T   R A T E R    
    public static Map<String, List<Rating>> highestRater(List<Rating> list){
        Map<String, List<Rating>> highestRaterMap = new HashMap<>();

        //populate map
        for(Rating r : list){
            String movieName = r.getMovieName();   
            int movieRating = r.getMovieRating();
        
            if(!highestRaterMap.containsKey(movieName)){
                highestRaterMap.put(movieName, new ArrayList<Rating>());
                highestRaterMap.get(movieName).add(r);
            }
            else {
                int currentHigh = highestRaterMap.get(movieName).get(0).getMovieRating();

                //clear if new high
                if (movieRating > currentHigh){
                    highestRaterMap.get(movieName).clear();
                }
                //set if new high or equal high
                if (movieRating >= currentHigh){
                    highestRaterMap.get(movieName).add(r);
                }
                //do nothing if rating less than current high
            }
        }
        return highestRaterMap;
    } 

    //   P R I N T   H I G H E S T   R A T E R   M A P 
    public static void printHighestRaterMap(Map<String, List<Rating>> highestRaterMap){
        System.out.println("");
        System.out.println(" - - - - -  H I G H E S T   R A T E R  - - - - - ");
        System.out.println("");
        for(String title : highestRaterMap.keySet()){
            System.out.println("Movie Name    : " + title);

            String output = "";
            for(Rating r : highestRaterMap.get(title)){
                if(output.equals("")){
                    output = r.getRaterName();
                } else {
                    output = output + ", " + r.getRaterName();
                }
            }
            System.out.println("Highest Rater : " + output);
            System.out.println("");
        }
    }

    //  R A T E R   A V E R A G E
    public static Map<String, Double> raterAverage(List<Rating> list){
        Map<String, List<Integer>> allRatingsMap = new HashMap<String, List<Integer>>();
        Map<String, Double> raterAverageMap = new HashMap<>();

        //Populate AllRatingsMap
        for (Rating r :list){
            String raterName = r.getRaterName();
            if (!allRatingsMap.containsKey(raterName)) {
                allRatingsMap.put(raterName, new ArrayList<Integer>());
            }
            //Populate raterAverageMap with rater names
            allRatingsMap.get(raterName).add(r.getMovieRating());
        }

        //calculate average and add to averages map
        for (String rater : allRatingsMap.keySet()){
            List<Integer> ratingsList = allRatingsMap.get(rater);
            Double totalRating = 0.0;
            int numOfRatings = 0;
            for(int rating : ratingsList){
                totalRating += rating;
                numOfRatings++;
            }
            Double avgRating = totalRating / numOfRatings;
            raterAverageMap.put(rater, avgRating);
        }
        return raterAverageMap;        
    }

    //  A D D   V A L U E S   T O   L I S T 
    public static List<Double> addAveragesToList(Map<String, Double> raterAverageMap){
        List<Double> averagesList = new ArrayList<>();
        for (Double rating : raterAverageMap.values()){
            averagesList.add(rating);
        }
        return averagesList;
    }

    //  P R I N T   H I G H E S T   R A T E R S  
    public static void printHighestRaters(List<Double> averagesList, Map<String, Double> raterAverageMap){
        System.out.println("");
        System.out.println(" - - - - -   H I G H E S T   1 0   R A T E R S   - - - - - ");
        System.out.println("");
        Collections.sort(averagesList, Collections.reverseOrder());
        for(int i = 0; i < 10; i++){
            Double avgRating = averagesList.get(i);
            for(String rater : raterAverageMap.keySet()){
                if (raterAverageMap.get(rater) == avgRating){
                    System.out.println("Rater      : " + rater);
                }
            }
            System.out.println("Avg Rating : " + avgRating);
            System.out.println("");
        }
    
    }

    //  P R I N T   L O W E S T   R A T E R S
    public static void printLowestRaters(List<Double> averagesList, Map<String, Double> raterAverageMap){
        System.out.println("");
        System.out.println(" - - - - -   L O W E S T   1 0   R A T E R S   - - - - - ");
        System.out.println("");
        Collections.sort(averagesList);
        
        for(int i = 0; i < 10; i++){
            Double avgRating = averagesList.get(i);
            for(String rater : raterAverageMap.keySet()){
                if (raterAverageMap.get(rater) == avgRating){
                    System.out.println("Rater      : " + rater);
                }
            }
            System.out.println("Avg Rating : " + avgRating);
            System.out.println("");
        }
    }

    //  P R I N T   A L L   R A T I N G S
    public static void printAllRatings(List<Rating> list){
        System.out.println("");
        System.out.println(" - - - - -  P R I N T   A L L   R A T I N G S  - - - - - ");
        System.out.println("");

        for (Rating r : list) {
            System.out.println(r);
        }
    }
}